#!/usr/bin/env python
# 
# Copyright (C) University College London, 2007-2012, all rights reserved.
# 
# This file is part of HemeLB and is provided to you under the terms of
# the GNU LGPL. Please see LICENSE in the top level directory for full
# details.
# 

import xdrlib
import numpy as np

def CountFluidSites(filename, verbosity=1):
    summary = 'FileName = "{filename}"\n'
    for var in 'StressType BlockCounts BlockSize VoxelSize Origin TotalFluidSites'.split():
        summary += '\t%s = {%s}\n' % (var,var)
        continue
    
    cfg = file(filename)
    preamble = cfg.read(5*4 + 4*8)
    un = xdrlib.Unpacker(preamble)
    
    StressType = un.unpack_uint()
    BlockCounts = [un.unpack_uint() for i in xrange(3)]
    BlockSize = un.unpack_uint()

    TotalBlocks = np.prod(BlockCounts)
    VoxelSize = un.unpack_double()
    Origin = [un.unpack_double() for i in xrange(3)]
    
    header = cfg.read(2 * TotalBlocks * 4)
    un = xdrlib.Unpacker(header)

    FluidSitesPerBlock = np.zeros(TotalBlocks, dtype=np.uint)
    BytesPerBlock = np.zeros(TotalBlocks, dtype=np.uint)

    for i in xrange(TotalBlocks):
        FluidSitesPerBlock[i] = un.unpack_uint()
        BytesPerBlock[i] = un.unpack_uint()

    TotalFluidSites = FluidSitesPerBlock.sum()

    if verbosity == 0:
        return TotalFluidSites
    elif verbosity == 1:
        return summary.format(**locals())

    # verbosity >= 2
    summary = summary.format(**locals())
    summary += '\t\tIndex\tSites\tBytes\n'
    for i in xrange(TotalBlocks):
        summary += '\t\t%d\t%d\t%d\n' % (i, FluidSitesPerBlock[i], BytesPerBlock[i])
        continue
    
    return summary

if __name__ == "__main__":
    import sys
    verbosity = 0
    inputs = sys.argv[1:]
    while inputs[0] == '-v':
        inputs.pop(0)
        verbosity += 1
    
    for fn in inputs:
        print CountFluidSites(fn, verbosity)
        
